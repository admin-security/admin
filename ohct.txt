<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="icon" type="image/png" href="https://image.crisp.chat/avatar/website/004a5a47-a939-46fb-afbe-5487ad5d4624/144/?avatar=https%3A%2F%2Fstorage.crisp.chat%2Fusers%2Favatar%2Fwebsite%2Fe16216de020bb000%2Fohct_lq2y2e.png" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta property="og:image" content="https://image.crisp.chat/avatar/website/004a5a47-a939-46fb-afbe-5487ad5d4624/144/?avatar=https%3A%2F%2Fstorage.crisp.chat%2Fusers%2Favatar%2Fwebsite%2Fe16216de020bb000%2Fohct_lq2y2e.png">
    <meta property="og:title" content="One Hat Cyber Team">
    <meta property="og:description" content="Indonesian Defacer" />
    <title>Hacked By One Hat Cyber Team</title>
    <link href="https://fonts.googleapis.com/css2?family=RocknRoll+One&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Graduate&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://dl.dropbox.com/s/3bfx3xoa270ohqp/dots.css" type="text/css">
    <link rel="stylesheet" href="https://dl.dropbox.com/s/1vsjgwq4ofxa4n8/style.css" type="text/css">
    <link rel="stylesheet" href="https://dl.dropbox.com/s/8bj9fxv7he22isf/blue.css" type="text/css">
    <link href="https://fonts.googleapis.com/css2?family=Merriweather&display=swap" rel="stylesheet">
   <style>
body {
margin: 0;
background-color: #121212;
}
section {
position: relative;
width: 100%;
height: 100vh;
background: #f5f5f5;
}
#pretty-bg {
position: absolute;
width: 100%;
height: 100%;
top: 0;
left: 0;
z-index: 1;
}
#in9q {
padding:0px;
display:flex;
flex-direction:column;
justify-content:center;
text-align:center;
max-width: 100%;
min-height:100vh;
}
</style>
<style type="text/css">
#st-2 {
  font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;;
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  backface-visibility: hidden;
  display: block;
  position: fixed;
  opacity: 1;
  text-align: left;
  top: 50%;
  z-index: 94034;
}
#st-2.st-left {
  left: 0px;
}
#st-2.st-hidden.st-left {
  left: -48px;
}
#st-2.st-hidden {
  width: 96px;
}
#st-2 > div {
  clear: left;
  float: left;
}
#st-2 .st-btn {
  -moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  border: none;
  cursor: pointer;
  display: inline-block;
  font-size: NaNpx;
  height: 48px;
  line-height: 24px;
  margin-bottom: 0;
  opacity: 1;
  overflow: hidden;
  padding: 12px;
  position: relative;
  text-align: left;
  top: 0;
  vertical-align: top;
  white-space: nowrap;
  width: 48px;
}
#st-2 .st-btn.st-first {
  border-top: none;
  border-top-right-radius: 4px;
}
#st-2 .st-btn.st-last {
  border-bottom: none;
  border-bottom-right-radius: 4px;
}
#st-2 .st-btn > svg {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  height: 24px;
  margin-left: 0;
  vertical-align: top;
  width: 24px;
}
#st-2 .st-btn > img {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  height: 24px;
  margin-left: 0;
  vertical-align: top;
  width: 24px;
}
#st-2 .st-btn > span {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  color: #fff;
  display: inline-block;
  font-weight: 500;
  left: -35px;
  letter-spacing: 0.5px;
  opacity: 0;
  padding: 0 6px;
  position: relative;
  vertical-align: top;
  filter: alpha(opacity=0);
}
#st-2 .st-btn.st-hide-label > span {
  display: none !important;
}
#st-2 .st-total {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  background: #fff;
  color: #555;
  display: inline-block;
  font-weight: 500;
  line-height: 18px;
  margin-right: 0;
  min-height: 34px;
  max-width: 80px;
  opacity: 1;
  padding: 4px 0;
  text-align: center;
  width: 48px;
}
#st-2 .st-total.st-hidden {
  display: none;
}
#st-2 .st-total > span {
  display: block;
  font-size: 18px;
  line-height: 21px;
  padding: 0;
}
#st-2 .st-total > span.st-shares {
  font-size: 11px;
  line-height: 11px;
}
#st-2 .st-toggle {
  left: -48px;
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  background: #ccc;
  border-bottom-right-radius: 4px;
  color: white;
  cursor: pointer;
  font-size: 24px;
  line-height: 24px;
  position: relative;
  text-align: center;
  width: 48px;
}
#st-2.st-hidden .st-toggle {
  border-top-right-radius: 4px;
}
#st-2.st-left .st-toggle .st-left {
  display: inline-block;
}
#st-2.st-left.st-hidden .st-toggle .st-left {
  display: none;
}
#st-2.st-left .st-toggle .st-right {
  display: none;
}
#st-2.st-left.st-hidden .st-toggle .st-right {
  display: inline-block;
}#st-2:hover .st-toggle {
  left: 0;
}
#st-2.st-hidden:hover .st-toggle {
  left: 48px;
}
#st-2.st-toggleable:hover .st-btn.st-last {
  border-bottom-right-radius: 0;
}
#st-2.st-toggleable:hover .st-btn.st-last:hover {
  border-bottom-right-radius: 4px;
}
#st-2 .st-btn:hover {
  border-bottom-right-radius: 4px;
  border-top-right-radius: 4px;
}
#st-2.st-has-labels .st-btn:hover {
  width: 150px;
}
#st-2:not(.st-has-labels) .st-btn:hover {
  width: 62px;
}
#st-2 .st-btn.st-hide-label:hover {
  width: 62px;
}
#st-2 .st-btn:hover > svg {
  margin-left: 5px;
}
#st-2 .st-btn:hover > img {
  margin-left: 5px;
}
#st-2 .st-btn:hover > span {
  opacity: 1;
  display: inline-block;
  left: 0;
  filter: alpha(opacity=100);
}
@media (max-width: 1024) {
  #st-2 .st-btn:hover > svg {
    margin-left: 0;
  }
  #st-2 .st-btn:hover > span {
    display: none;
  }
}@media (max-width: 1024) {
  #st-2 {
  bottom: 0;
  display: flex;
  left: 0;
  right: 0;
  top: auto;
  width: 100%;
}
#st-2.st-hidden {
  bottom: -48px;
  width: 100%;
}
#st-2.st-hidden.st-left {
  left: 0;
}
#st-2.st-hidden.st-right {
  right: 0;
}
#st-2 > div {
  -moz-flex: 1;
  -ms-flex: 1;
  -webkit-flex: 1;
  clear: none;
  flex: 1;
  float: none;
}
#st-2 .st-total {
  background: #fff;
  padding: 6px 8px;
}
#st-2 .st-btn {
  -moz-border-radius: 0 !important;
-webkit-border-radius: 0 !important;
border-radius: 0 !important;
  text-align: center;
  width: auto;
}
#st-2 .st-btn > span {
  display: none;
}
#st-2 .st-toggle {
  display: none;
}body { padding-bottom: 48px; }
}
#st-2 .st-btn[data-network='facebook'] {
  background-color: #4267B2
}
#st-2 .st-btn[data-network='facebook'] img {
  filter: 
}
#st-2 .st-btn[data-network='facebook'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='whatsapp'] {
  background-color: #25D366
}
#st-2 .st-btn[data-network='whatsapp'] img {
  filter: 
}
#st-2 .st-btn[data-network='whatsapp'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='gmail'] {
  background-color: #CB2027
}
#st-2 .st-btn[data-network='gmail'] img {
  filter: 
}
#st-2 .st-btn[data-network='gmail'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='instagram'] {
  background: #f09433; 
background: -moz-linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%); 
background: -webkit-linear-gradient(45deg, #f09433 0%,#e6683c 25%,#dc2743 50%,#cc2366 75%,#bc1888 100%); 
background: linear-gradient(45deg, #f09433 0%,#e6683c 25%,#dc2743 50%,#cc2366 75%,#bc1888 100%); 
filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f09433', endColorstr='#bc1888',GradientType=1 );
  }
#st-2 .st-btn[data-network='instagram'] img {
  filter: 
}
#st-2 .st-btn[data-network='instagram'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='sms'] {
  background-color: #ffbd00
}
#st-2 .st-btn[data-network='sms'] img {
  filter: 
}
#st-2 .st-btn[data-network='sms'] > span {
  color: #fff
}
#st-2 .st-btn[data-network='sharethis'] {
  background-color: #95D03A
}
#st-2 .st-btn[data-network='sharethis'] img {
  filter: 
}
#st-2 .st-btn[data-network='sharethis'] > span {
  color: #fff
}#st-2 .st-btn[data-network='snapchat'] > span {
  color: #333};
}</style>
<style>
@import url('https://fonts.googleapis.com/css?family=Orbitron');
/*=====================
    2 Maan Top Bar
=======================*/
.maan-top-bar {
  padding: 0px 0px;
  background: var(--maan-color-black2);
}
.maan-top-bar .maan-weider-news .icon svg {
  fill: var(--maan-color-white);
  --svg-font-size: 18px;
}
.maan-top-bar .maan-weider-news .maan-city,
.maan-top-bar .maan-weider-news .maan-celsius {
  display: inline-block;
  color: var(--maan-color-white);
}
.maan-top-bar .maan-weider-news .maan-city {
  font-size: 14px;
  line-height: 24px;
  margin: 0px 4px;
}
.maan-top-bar .maan-weider-news .maan-celsius {
  font-size: 12px;
  line-height: 22px;
}
.maan-top-bar .maan-current-date {
  color: var(--maan-color-white);
  text-align: center;
  margin-left: 20px;
}
.maan-top-bar .maan-current-date .icon svg {
  fill: var(--maan-color-white);
  --svg-font-size: 12px;
  margin-right: 0px;
}
.maan-top-bar .maan-current-date .maan-current-week,
.maan-top-bar .maan-current-date .maan-current-day {
font-family: 'Merriweather', sans-serif;
color: #ffffff;
font-size: 18px;
margin-left: 0px;
padding-top: 0px;
padding-bottom: 0px;
font-weight: bold;
}
.maan-top-bar .maan-social-link {
  text-align: right;
  max-width: 163px;
  margin-left: auto;
}

.maan-top-bar .maan-social-link ul {
  border-left: 1px solid var(--maan-color-white);
}
.maan-top-bar .maan-social-link li {
  display: inline-block;
  margin-right: 14px;
}
.maan-top-bar .maan-social-link li:last-child {
  margin-right: 0px;
}
.maan-top-bar .maan-social-link li svg {
  fill: var(--maan-color-white);
}
.maan-top-bar .maan-social-link li a:hover svg {
  fill: var(--maan-color-blue);
}
.date-time{
display: flex;
align-items: center;
justify-content: space-between;
}
#txt {
font-family: 'Merriweather', sans-serif;
color: #ffffff;
font-weight: bold;
font-size: 18px;
margin-right: 20px;
padding-top: 0px;
padding-bottom: 0px;
}
</style>
<style>
.type-wrap {
font-family: 'Merriweather';
font-size: 25px;
margin: 0;
font-weight: 300px;
text-align: center;
margin-top: 0px;
line-height: 45px;
}
.stroke {
-webkit-text-stroke-width: 0.1px;
-webkit-text-stroke-color: #d9d9d9;
-webkit-text-fill-color: #d9d9d9;
text-shadow: 0px 0px 5px black;
font-weight: bold;
text-align: center;
}
.combet {
 font-size: 33px;
 font-family: 'Merriweather';
 margin-top: 0px;
 font-weight: bold;
}
.ohct {
font-size: 25px;
font-family: 'Merriweather';
font-weight: bold;
}
.ohct1 {
font-size: 27px;
font-family: 'Merriweather';
font-weight: bold;
-webkit-text-stroke-width: 0.1px;
-webkit-text-stroke-color: red;
-webkit-text-fill-color: red;
text-shadow: 0px 0px 2px white;
}
.ohct2 {
font-size: 25px;
font-family: 'Merriweather';
font-weight: bold;
-webkit-text-stroke-width: 0.1px;
-webkit-text-stroke-color: #d9d9d9;
-webkit-text-fill-color: #d9d9d9;
text-shadow: 0px 0px 5px #000000;
}
</style>
<style>
.blink {
animation: blink-animation 1s steps(5, start) infinite;
-webkit-animation: blink-animation 1s steps(5, start) infinite;
}
@keyframes blink-animation {
to {
visibility: hidden;
}
}
@-webkit-keyframes blink-animation {
to {
visibility: hidden;
}
</style>
</head>
<body oncontextmenu="return false;" onload="startTime()">
<section style="background-image: url(&quot;https://f.top4top.io/p_2201jek3p1.jpg&quot;); background-repeat: no-repeat; background-size: cover; background-attachment: fixed; background-position: center center;">
<canvas id="pretty-bg"></canvas>
<div class="bg-animation">
<div id='stars'></div>
<div id='stars2'></div>
<div id='stars3'></div>
<div id='stars4'></div>
</div>
<div id="in9q" class="stroke">
<div class="maan-top-bar">
<div class="date-time">
<div class="maan-current-date">
<span class="maan-current-week" id="maan-current-week-day"></span><font color="white"> : </font><span class="maan-current-day" id="maan-current-date"></span></div>
<div id="txt"></div>
</div></div>
<div id="st-2" class=" st-sticky-share-buttons st-left st-toggleable st-has-labels ">

<div class="st-btn st-first" data-network="facebook" style="display: inline-block;">
  <img alt="facebook sharing button" src="https://platform-cdn.sharethis.com/img/facebook.svg">
  <span class="st-label">
<a href="https://www.facebook.com/OHCT-Hacktivist-105637844802806" style="color: #fff;">Fanpage</a></span>
</div>

<div class="st-btn" data-network="whatsapp" style="display: inline-block;">
  <img alt="whatsapp sharing button" src="https://platform-cdn.sharethis.com/img/whatsapp.svg">
  <span class="st-label">
<a href="#" style="color: #fff;">WhatsApp</a></span>
</div>

<div class="st-btn" data-network="gmail" style="display: inline-block;">
  <img alt="gmail sharing button" src="https://platform-cdn.sharethis.com/img/gmail.svg">
  <span class="st-label">
<a href="#" style="color: #fff;">Email</a></span>
</div>

<div class="st-btn" data-network="instagram" style="display: inline-block;">
  <img alt="email sharing button" src="https://platform-cdn.sharethis.com/img/instagram.svg">
  <span class="st-label">
<a href="https://www.instagram.com/ohct.id/" style="color: #fff;">Instagram</a></span>
</div>
</div>
<div class="combet">
<span class="blink">HACKED ONE HAT CYBER TEAM<br></span>
<img src="https://k.top4top.io/p_2205wv5pm1.png" width="230" height="230"><br></div>
<div class="ohct">
<span>SORRY, IF I HAVE HACKED YOUR WEBSITE.<br>BECAUSE YOUR WEBSITE SECURITY IS NOT SECURE.<br>PLEASE REPAIR YOUR WEBSITE ASAP.<br>I'M JUST TESTING THE SECURITY YOUR WEBSITE.<br>ONCE AGAIN, I'M SORRY. THANKS YOU !!<br><br></span></div>
<div class="type-wrap">
<div class="cd-headline clip">
<span class="ohct2">[</span>
<span class="ohct1"> ONE HAT CYBER TEAM </span>
<span class="ohct2">]</span><br>
<span class="cd-words-wrapper" style="color: white; margin-top: -20px;">
<b>Mr.Casper
</b>
<b>Mr.Combet
</b>
<b>Tu4n Private 404
</b>
<b>Mr.Quixter
</b>
<b>Pir4t3cyb3r
</b>
<b>Drayso
</b>
<b>Mr.Pin666
</b>
<b>IbalGanz
</b>
</span>
<audio autoplay="autoplay" controls="controls" src="https://dl.dropbox.com/s/mn0vnejeciy99u4/Sia%20-%20Unstoppable%20%28Official%20Music%20Video%29.mp3?dl=0" type="audio/mpeg" hidden="hidden"></audio>
</div>
</div>
</div>
</div>
</section>
<script src="https://dl.dropbox.com/s/43cgqnmwypfmnki/jquery.min.js"></script>
<script src="https://dl.dropbox.com/s/cv221c98gj2jn2s/bootstrap.min.js"></script>
<script src="https://dl.dropbox.com/s/k9cgswolu91hf0x/typed.min.js"></script> 
<script src="https://dl.dropbox.com/s/wfghupnohpjkrvq/script.js"></script>
<script>
      'use strict';
const canvas = document.getElementById('pretty-bg');
if (canvas) {
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;

    let config = {
        SIM_RESOLUTION: 128,
        DYE_RESOLUTION: 512,
        DENSITY_DISSIPATION: 0.97,
        VELOCITY_DISSIPATION: 0.98,
        PRESSURE_DISSIPATION: 0.8,
        PRESSURE_ITERATIONS: 20,
        CURL: 30,
        SPLAT_RADIUS: 0.5,
        SHADING: false,
        COLORFUL: false,
        PAUSED: false,
        BACK_COLOR: {
            r: 0,
            g: 0,
            b: 0
        },
        TRANSPARENT: true
    }

    function pointerPrototype() {
        this.id = -1;
        this.x = 0;
        this.y = 0;
        this.dx = 0;
        this.dy = 0;
        this.down = false;
        this.moved = false;
        this.color = [30, 0, 300];
    }

    let pointers = [];
    let splatStack = [];
    pointers.push(new pointerPrototype());

    const {
        gl,
        ext
    } = getWebGLContext(canvas);

    if (isMobile()) {
        config.DYE_RESOLUTION = 128;
        config.SHADING = false;
    }
    if (!ext.supportLinearFiltering)
        config.SHADING = false;


    function getWebGLContext(canvas) {
        const params = {
            alpha: true,
            depth: false,
            stencil: false,
            antialias: false,
            preserveDrawingBuffer: false
        };

        let gl = canvas.getContext('webgl2', params);
        const isWebGL2 = !!gl;
        if (!isWebGL2)
            gl = canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);

        let halfFloat;
        let supportLinearFiltering;
        if (isWebGL2) {
            gl.getExtension('EXT_color_buffer_float');
            supportLinearFiltering = gl.getExtension('OES_texture_float_linear');
        } else {
            halfFloat = gl.getExtension('OES_texture_half_float');
            supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');
        }

        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;
        let formatRGBA;
        let formatRG;
        let formatR;

        if (isWebGL2) {
            formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);
            formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);
            formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);
        } else {
            formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);
            formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);
            formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);
        }

        return {
            gl,
            ext: {
                formatRGBA,
                formatRG,
                formatR,
                halfFloatTexType,
                supportLinearFiltering
            }
        };
    }

    function getSupportedFormat(gl, internalFormat, format, type) {
        if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {
            switch (internalFormat) {
                case gl.R16F:
                    return getSupportedFormat(gl, gl.RG16F, gl.RG, type);
                case gl.RG16F:
                    return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);
                default:
                    return null;
            }
        }

        return {
            internalFormat,
            format
        }
    }

    function supportRenderTextureFormat(gl, internalFormat, format, type) {
        let texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);

        let fbo = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);

        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (status != gl.FRAMEBUFFER_COMPLETE)
            return false;
        return true;
    }


    function clamp01(input) {
        return Math.min(Math.max(input, 0), 1);
    }


    function isMobile() {
        return /Mobi|Android/i.test(navigator.userAgent);
    }

    class GLProgram {
        constructor(vertexShader, fragmentShader) {
            this.uniforms = {};
            this.program = gl.createProgram();

            gl.attachShader(this.program, vertexShader);
            gl.attachShader(this.program, fragmentShader);
            gl.linkProgram(this.program);

            if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))
                throw gl.getProgramInfoLog(this.program);

            const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
            for (let i = 0; i < uniformCount; i++) {
                const uniformName = gl.getActiveUniform(this.program, i).name;
                this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);
            }
        }

        bind() {
            gl.useProgram(this.program);
        }
    }

    function compileShader(type, source) {
        const shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
            throw gl.getShaderInfoLog(shader);

        return shader;
    };

    const baseVertexShader = compileShader(gl.VERTEX_SHADER, `
    precision highp float;
    attribute vec2 aPosition;
    varying vec2 vUv;
    varying vec2 vL;
    varying vec2 vR;
    varying vec2 vT;
    varying vec2 vB;
    uniform vec2 texelSize;
    void main () {
        vUv = aPosition * 0.5 + 0.5;
        vL = vUv - vec2(texelSize.x, 0.0);
        vR = vUv + vec2(texelSize.x, 0.0);
        vT = vUv + vec2(0.0, texelSize.y);
        vB = vUv - vec2(0.0, texelSize.y);
        gl_Position = vec4(aPosition, 0.0, 1.0);
    }
`);

    const clearShader = compileShader(gl.FRAGMENT_SHADER, `
    precision mediump float;
    precision mediump sampler2D;
    varying highp vec2 vUv;
    uniform sampler2D uTexture;
    uniform float value;
    void main () {
        gl_FragColor = value * texture2D(uTexture, vUv);
    }
`);

    const colorShader = compileShader(gl.FRAGMENT_SHADER, `
    precision mediump float;
    uniform vec4 color;
    void main () {
        gl_FragColor = color;
    }
`);

    const backgroundShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    uniform sampler2D uTexture;
    uniform float aspectRatio;
    #define SCALE 25.0
    void main () {
        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));
        float v = mod(uv.x + uv.y, 2.0);
        v = v * 0.1 + 0.8;
        gl_FragColor = vec4(vec3(v), 1.0);
    }
`);

    const displayShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    uniform sampler2D uTexture;
    void main () {
        vec3 C = texture2D(uTexture, vUv).rgb;
        float a = max(C.r, max(C.g, C.b));
        gl_FragColor = vec4(C, a);
    }
`);

    const displayShadingShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    varying vec2 vL;
    varying vec2 vR;
    varying vec2 vT;
    varying vec2 vB;
    uniform sampler2D uTexture;
    uniform vec2 texelSize;
    void main () {
        vec3 L = texture2D(uTexture, vL).rgb;
        vec3 R = texture2D(uTexture, vR).rgb;
        vec3 T = texture2D(uTexture, vT).rgb;
        vec3 B = texture2D(uTexture, vB).rgb;
        vec3 C = texture2D(uTexture, vUv).rgb;
        float dx = length(R) - length(L);
        float dy = length(T) - length(B);
        vec3 n = normalize(vec3(dx, dy, length(texelSize)));
        vec3 l = vec3(0.0, 0.0, 1.0);
        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);
        C.rgb *= diffuse;
        float a = max(C.r, max(C.g, C.b));
        gl_FragColor = vec4(C, a);
    }
`);

    const splatShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    uniform sampler2D uTarget;
    uniform float aspectRatio;
    uniform vec3 color;
    uniform vec2 point;
    uniform float radius;
    void main () {
        vec2 p = vUv - point.xy;
        p.x *= aspectRatio;
        vec3 splat = exp(-dot(p, p) / radius) * color;
        vec3 base = texture2D(uTarget, vUv).xyz;
        gl_FragColor = vec4(base + splat, 1.0);
    }
`);

    const advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    uniform sampler2D uVelocity;
    uniform sampler2D uSource;
    uniform vec2 texelSize;
    uniform vec2 dyeTexelSize;
    uniform float dt;
    uniform float dissipation;
    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {
        vec2 st = uv / tsize - 0.5;
        vec2 iuv = floor(st);
        vec2 fuv = fract(st);
        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);
        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);
        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);
        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);
        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);
    }
    void main () {
        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;
        gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);
        gl_FragColor.a = 1.0;
    }
`);

    const advectionShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    uniform sampler2D uVelocity;
    uniform sampler2D uSource;
    uniform vec2 texelSize;
    uniform float dt;
    uniform float dissipation;
    void main () {
        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;
        gl_FragColor = dissipation * texture2D(uSource, coord);
        gl_FragColor.a = 1.0;
    }
`);

    const divergenceShader = compileShader(gl.FRAGMENT_SHADER, `
    precision mediump float;
    precision mediump sampler2D;
    varying highp vec2 vUv;
    varying highp vec2 vL;
    varying highp vec2 vR;
    varying highp vec2 vT;
    varying highp vec2 vB;
    uniform sampler2D uVelocity;
    void main () {
        float L = texture2D(uVelocity, vL).x;
        float R = texture2D(uVelocity, vR).x;
        float T = texture2D(uVelocity, vT).y;
        float B = texture2D(uVelocity, vB).y;
        vec2 C = texture2D(uVelocity, vUv).xy;
        if (vL.x < 0.0) { L = -C.x; }
        if (vR.x > 1.0) { R = -C.x; }
        if (vT.y > 1.0) { T = -C.y; }
        if (vB.y < 0.0) { B = -C.y; }
        float div = 0.5 * (R - L + T - B);
        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);
    }
`);

    const curlShader = compileShader(gl.FRAGMENT_SHADER, `
    precision mediump float;
    precision mediump sampler2D;
    varying highp vec2 vUv;
    varying highp vec2 vL;
    varying highp vec2 vR;
    varying highp vec2 vT;
    varying highp vec2 vB;
    uniform sampler2D uVelocity;
    void main () {
        float L = texture2D(uVelocity, vL).y;
        float R = texture2D(uVelocity, vR).y;
        float T = texture2D(uVelocity, vT).x;
        float B = texture2D(uVelocity, vB).x;
        float vorticity = R - L - T + B;
        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);
    }
`);

    const vorticityShader = compileShader(gl.FRAGMENT_SHADER, `
    precision highp float;
    precision highp sampler2D;
    varying vec2 vUv;
    varying vec2 vL;
    varying vec2 vR;
    varying vec2 vT;
    varying vec2 vB;
    uniform sampler2D uVelocity;
    uniform sampler2D uCurl;
    uniform float curl;
    uniform float dt;
    void main () {
        float L = texture2D(uCurl, vL).x;
        float R = texture2D(uCurl, vR).x;
        float T = texture2D(uCurl, vT).x;
        float B = texture2D(uCurl, vB).x;
        float C = texture2D(uCurl, vUv).x;
        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));
        force /= length(force) + 0.0001;
        force *= curl * C;
        force.y *= -1.0;
        vec2 vel = texture2D(uVelocity, vUv).xy;
        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);
    }
`);

    const pressureShader = compileShader(gl.FRAGMENT_SHADER, `
    precision mediump float;
    precision mediump sampler2D;
    varying highp vec2 vUv;
    varying highp vec2 vL;
    varying highp vec2 vR;
    varying highp vec2 vT;
    varying highp vec2 vB;
    uniform sampler2D uPressure;
    uniform sampler2D uDivergence;
    vec2 boundary (vec2 uv) {
        return uv;
        // uncomment if you use wrap or repeat texture mode
        // uv = min(max(uv, 0.0), 1.0);
        // return uv;
    }
    void main () {
        float L = texture2D(uPressure, boundary(vL)).x;
        float R = texture2D(uPressure, boundary(vR)).x;
        float T = texture2D(uPressure, boundary(vT)).x;
        float B = texture2D(uPressure, boundary(vB)).x;
        float C = texture2D(uPressure, vUv).x;
        float divergence = texture2D(uDivergence, vUv).x;
        float pressure = (L + R + B + T - divergence) * 0.25;
        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);
    }
`);

    const gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, `
    precision mediump float;
    precision mediump sampler2D;
    varying highp vec2 vUv;
    varying highp vec2 vL;
    varying highp vec2 vR;
    varying highp vec2 vT;
    varying highp vec2 vB;
    uniform sampler2D uPressure;
    uniform sampler2D uVelocity;
    vec2 boundary (vec2 uv) {
        return uv;
        // uv = min(max(uv, 0.0), 1.0);
        // return uv;
    }
    void main () {
        float L = texture2D(uPressure, boundary(vL)).x;
        float R = texture2D(uPressure, boundary(vR)).x;
        float T = texture2D(uPressure, boundary(vT)).x;
        float B = texture2D(uPressure, boundary(vB)).x;
        vec2 velocity = texture2D(uVelocity, vUv).xy;
        velocity.xy -= vec2(R - L, T - B);
        gl_FragColor = vec4(velocity, 0.0, 1.0);
    }
`);

    const blit = (() => {
        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);
        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(0);

        return (destination) => {
            gl.bindFramebuffer(gl.FRAMEBUFFER, destination);
            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
        }
    })();

    let simWidth;
    let simHeight;
    let dyeWidth;
    let dyeHeight;
    let density;
    let velocity;
    let divergence;
    let curl;
    let pressure;

    const clearProgram = new GLProgram(baseVertexShader, clearShader);
    const colorProgram = new GLProgram(baseVertexShader, colorShader);
    const backgroundProgram = new GLProgram(baseVertexShader, backgroundShader);
    const displayProgram = new GLProgram(baseVertexShader, displayShader);
    const displayShadingProgram = new GLProgram(baseVertexShader, displayShadingShader);
    const splatProgram = new GLProgram(baseVertexShader, splatShader);
    const advectionProgram = new GLProgram(baseVertexShader, ext.supportLinearFiltering ? advectionShader : advectionManualFilteringShader);
    const divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);
    const curlProgram = new GLProgram(baseVertexShader, curlShader);
    const vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);
    const pressureProgram = new GLProgram(baseVertexShader, pressureShader);
    const gradienSubtractProgram = new GLProgram(baseVertexShader, gradientSubtractShader);

    function initFramebuffers() {
        let simRes = getResolution(config.SIM_RESOLUTION);
        let dyeRes = getResolution(config.DYE_RESOLUTION);

        simWidth = simRes.width;
        simHeight = simRes.height;
        dyeWidth = dyeRes.width;
        dyeHeight = dyeRes.height;

        const texType = ext.halfFloatTexType;
        const rgba = ext.formatRGBA;
        const rg = ext.formatRG;
        const r = ext.formatR;

        density = createDoubleFBO(2, dyeWidth, dyeHeight, rgba.internalFormat, rgba.format, texType, ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST);
        velocity = createDoubleFBO(0, simWidth, simHeight, rg.internalFormat, rg.format, texType, ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST);
        divergence = createFBO(4, simWidth, simHeight, r.internalFormat, r.format, texType, gl.NEAREST);
        curl = createFBO(5, simWidth, simHeight, r.internalFormat, r.format, texType, gl.NEAREST);
        pressure = createDoubleFBO(6, simWidth, simHeight, r.internalFormat, r.format, texType, gl.NEAREST);
    }

    function getResolution(resolution) {
        let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;
        if (aspectRatio < 1)
            aspectRatio = 1.0 / aspectRatio;

        let max = Math.round(resolution * aspectRatio);
        let min = Math.round(resolution);

        if (gl.drawingBufferWidth > gl.drawingBufferHeight)
            return {
                width: max,
                height: min
            };
        else
            return {
                width: min,
                height: max
            };
    }

    function createFBO(texId, w, h, internalFormat, format, type, param) {
        gl.activeTexture(gl.TEXTURE0 + texId);
        let texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);

        let fbo = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        gl.viewport(0, 0, w, h);
        gl.clear(gl.COLOR_BUFFER_BIT);

        return {
            texture,
            fbo,
            texId
        };
    }

    function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {
        let fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);
        let fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);

        return {
            get read() {
                return fbo1;
            },
            get write() {
                return fbo2;
            },
            swap() {
                let temp = fbo1;
                fbo1 = fbo2;
                fbo2 = temp;
            }
        }
    }

    initFramebuffers();

    let lastColorChangeTime = Date.now();

    update();

    function update() {
        resizeCanvas();
        input();
        if (!config.PAUSED)
            step(0.016);
        render(null);
        requestAnimationFrame(update);
    }

    function input() {
        if (splatStack.length > 0)
            multipleSplats(splatStack.pop());

        for (let i = 0; i < pointers.length; i++) {
            const p = pointers[i];
            if (p.moved) {
                splat(p.x, p.y, p.dx, p.dy, p.color);
                p.moved = false;
            }
        }

        if (!config.COLORFUL)
            return;

        if (lastColorChangeTime + 100 < Date.now()) {
            lastColorChangeTime = Date.now();
            for (let i = 0; i < pointers.length; i++) {
                const p = pointers[i];
                p.color = generateColor();
            }
        }
    }

    function step(dt) {
        gl.disable(gl.BLEND);
        gl.viewport(0, 0, simWidth, simHeight);

        curlProgram.bind();
        gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);
        gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.texId);
        blit(curl.fbo);

        vorticityProgram.bind();
        gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);
        gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.texId);
        gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.texId);
        gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);
        gl.uniform1f(vorticityProgram.uniforms.dt, dt);
        blit(velocity.write.fbo);
        velocity.swap();

        divergenceProgram.bind();
        gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);
        gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.texId);
        blit(divergence.fbo);

        clearProgram.bind();
        let pressureTexId = pressure.read.texId;
        gl.activeTexture(gl.TEXTURE0 + pressureTexId);
        gl.bindTexture(gl.TEXTURE_2D, pressure.read.texture);
        gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);
        gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);
        blit(pressure.write.fbo);
        pressure.swap();

        pressureProgram.bind();
        gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);
        gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.texId);
        pressureTexId = pressure.read.texId;
        gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);
        gl.activeTexture(gl.TEXTURE0 + pressureTexId);
        for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {
            gl.bindTexture(gl.TEXTURE_2D, pressure.read.texture);
            blit(pressure.write.fbo);
            pressure.swap();
        }

        gradienSubtractProgram.bind();
        gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);
        gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.texId);
        gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.texId);
        blit(velocity.write.fbo);
        velocity.swap();

        advectionProgram.bind();
        gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);
        if (!ext.supportLinearFiltering)
            gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, 1.0 / simWidth, 1.0 / simHeight);
        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.texId);
        gl.uniform1i(advectionProgram.uniforms.uSource, velocity.read.texId);
        gl.uniform1f(advectionProgram.uniforms.dt, dt);
        gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);
        blit(velocity.write.fbo);
        velocity.swap();

        gl.viewport(0, 0, dyeWidth, dyeHeight);

        if (!ext.supportLinearFiltering)
            gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, 1.0 / dyeWidth, 1.0 / dyeHeight);
        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.texId);
        gl.uniform1i(advectionProgram.uniforms.uSource, density.read.texId);
        gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);
        blit(density.write.fbo);
        density.swap();
    }

    function render(target) {
        if (target == null || !config.TRANSPARENT) {
            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            gl.enable(gl.BLEND);
        } else {
            gl.disable(gl.BLEND);
        }

        let width = target == null ? gl.drawingBufferWidth : dyeWidth;
        let height = target == null ? gl.drawingBufferHeight : dyeHeight;

        gl.viewport(0, 0, width, height);

        if (!config.TRANSPARENT) {
            colorProgram.bind();
            let bc = config.BACK_COLOR;
            gl.uniform4f(colorProgram.uniforms.color, bc.r / 255, bc.g / 255, bc.b / 255, 1);
            blit(target);
        }

        if (target == null && config.TRANSPARENT) {
            backgroundProgram.bind();
            // gl.uniform1f(backgroundProgram.uniforms.aspectRatio, canvas.width / canvas.height);
            // blit(null);
        }

        if (config.SHADING) {
            displayShadingProgram.bind();
            gl.uniform2f(displayShadingProgram.uniforms.texelSize, 1.0 / width, 1.0 / height);
            gl.uniform1i(displayShadingProgram.uniforms.uTexture, density.read.texId);
        } else {
            displayProgram.bind();
            gl.uniform1i(displayProgram.uniforms.uTexture, density.read.texId);
        }

        blit(target);
    }

    function splat(x, y, dx, dy, color) {
        gl.viewport(0, 0, simWidth, simHeight);
        splatProgram.bind();
        gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.texId);
        gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);
        gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);
        gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);
        gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS / 100.0);
        blit(velocity.write.fbo);
        velocity.swap();

        gl.viewport(0, 0, dyeWidth, dyeHeight);
        gl.uniform1i(splatProgram.uniforms.uTarget, density.read.texId);
        gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);
        blit(density.write.fbo);
        density.swap();
    }

    function multipleSplats(amount, move = false) {
        for (let i = 0; i < amount; i++) {
            const color = generateColor();
            color.r *= 10.0;
            color.g *= 10.0;
            color.b *= 10.0;
            var x = canvas.width * Math.random();
            var y = canvas.height * Math.random();
            var dx = 1000 * (Math.random() - 0.5);
            var dy = 1000 * (Math.random() - 0.5);
            if (move) {
                x = canvas.width / 2;
                y = canvas.height / 2;
                dx = 1000 * (Math.random() - 0.5);
                dy = 1000 * (Math.random() - 0.5);
            }
            splat(x, y, dx, dy, color);
        }
    }

    function resizeCanvas() {
        if (canvas.width != canvas.clientWidth || canvas.height != canvas.clientHeight) {
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            initFramebuffers();
        }
    }
    // setInterval(function(){
    //     multipleSplats(1, true);
    // },900)
    var my_dx = 0;
    var my_dy = 0;
    var my_color = generateColor();
    canvas.addEventListener('mousemove', e => {

    splat(e.offsetX,e.offsetY, (e.offsetX - my_dx)*5, (e.offsetY - my_dy)*5, my_color);
    my_dx = e.offsetX;
    my_dy = e.offsetY;
    });

        setInterval(function(){
            my_color = generateColor();  
        }, 500);

    // var f = true;
    canvas.addEventListener('touchmove', e => {
        // if (f){
        //     f = false;
        // }
        // multipleSplats(1, true);
        e.preventDefault();
        const touches = e.targetTouches;
        for (let i = 0; i < touches.length; i++) {
            let pointer = pointers[i];
            pointer.moved = pointer.down;
            pointer.dx = (touches[i].pageX - pointer.x) * 8.0;
            pointer.dy = (touches[i].pageY - pointer.y) * 8.0;
            pointer.x = touches[i].pageX;
            pointer.y = touches[i].pageY;
        }
    }, false);

    // canvas.addEventListener('mousedown', () => {
    //     pointers[0].color = generateColor();
    // });
    // pointers[0].color = generateColor();


    canvas.addEventListener('touchstart', e => {
        e.preventDefault();
        const touches = e.targetTouches;
        for (let i = 0; i < touches.length; i++) {
            if (i >= pointers.length)
                pointers.push(new pointerPrototype());

            pointers[i].id = touches[i].identifier;
            pointers[i].down = true;
            pointers[i].x = touches[i].pageX;
            pointers[i].y = touches[i].pageY;
            pointers[i].color = generateColor();
        }
    });

    window.addEventListener('mouseup', () => {
        pointers[0].down = false;
    });

    window.addEventListener('touchend', e => {
        const touches = e.changedTouches;
        for (let i = 0; i < touches.length; i++)
            for (let j = 0; j < pointers.length; j++)
                if (touches[i].identifier == pointers[j].id)
                    pointers[j].down = false;
    });

    window.addEventListener('keydown', e => {
        if (e.key === 'p')
            config.PAUSED = !config.PAUSED;
    });

    function generateColor() {
        // let c = HSVtoRGB(0.2518, 0.9430, 0.7569);
        // var f = Math.random(1);
        // console.log(f);
        // let colors = [
        //     HSVtoRGB(0.4713, 0.4819, 0.7569),
        //     HSVtoRGB(0.6104, 0.3776, 0.7686),
        //     HSVtoRGB(0.0254, 0.5481, 0.9373),
        //     HSVtoRGB(0.0608, 0.4948, 0.7608),
        //     HSVtoRGB(0.6140, 0.0748, 0.9961),
        // ]
        // let first = HSVtoRGB(0.4713, 0.4819, 0.7569);
        // let second = HSVtoRGB(0.6104, 0.3776, 0.7686);
        // let third = HSVtoRGB(0.0254, 0.5481, 0.9373);
        // let fourth = HSVtoRGB(0.0608, 0.4948, 0.7608);
        // let fifth = HSVtoRGB(0.6140, 0.0748, 0.9961);
        // let f = getRandomInt(0,4);

        // let c;

        // c = colors[f];
        // let c = {
        //     r = 100,
        //     g = 193,
        //     b = 177
        //     };
        // console.log(c);
        // c.r *= 0.1;
        // c.g *= 0.1;
        // c.b *= 0.1;
        let c = HSVtoRGB(Math.random(), 1.0, 1.0);
        c.r *= 0.15;
        c.g *= 0.15;
        c.b *= 0.15;
        return c;
        return c;
    }

    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function HSVtoRGB(h, s, v) {
        let r, g, b, i, f, p, q, t;
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);

        switch (i % 6) {
            case 0:
                r = v, g = t, b = p;
                break;
            case 1:
                r = q, g = v, b = p;
                break;
            case 2:
                r = p, g = v, b = t;
                break;
            case 3:
                r = p, g = q, b = v;
                break;
            case 4:
                r = t, g = p, b = v;
                break;
            case 5:
                r = v, g = p, b = q;
                break;
        }

        return {
            r,
            g,
            b
        };
    }
}
    </script>
    <script>
    var optionsWeekday = { weekday: 'long' };
    var options = { year: 'numeric', month: 'long', day: 'numeric' };
    var date = new Date();
    document.getElementById("maan-current-week-day").innerHTML =date.toLocaleDateString("en-US", optionsWeekday);
    document.getElementById("maan-current-date").innerHTML =date.toLocaleDateString("en-US", options);

    function currentTime() {
        var date = new Date(); /* creating object of Date class */
        var hour = date.getHours();
        var min = date.getMinutes();
        var sec = date.getSeconds();
        hour = updateTime(hour);
        min = updateTime(min);
        sec = updateTime(sec);
        var midday = "AM";
        midday = (hour >= 12) ? "PM" : "AM";
        hour = (hour == 0) ? 12 : ((hour > 12) ? (hour - 12): hour);
        document.getElementById("txt").innerText = hour + " : " + min + " : " + sec + " " + midday; /* adding time to the div */
        var t = setTimeout(function(){ currentTime() }, 1000); /* setting timer */
    }

    function updateTime(k) {
        if (k < 10) {
            return "0" + k;
        }
        else {
            return k;
        }
    }
    currentTime(); /* calling currentTime() function to initiate the process */
</script>
<script>
	jQuery(document).ready(function($){
	 $('.tlt').textillate({
  selector: '.texts',
  loop: true,
  minDisplayTime: 2500,
  autoStart: true,
  outEffects: [ 'bounceOut' ],

  // in animation settings
  in: {
    // set the effect name
    effect: 'fadeIn',
    delayScale: 1.5,
    delay: 50,
    sync: false,
    shuffle: true
  },

  // out animation settings.
  out: {
    effect: 'bounceOut',
    delayScale: 1.5,
    delay: 150,
    sync: false,
    shuffle: true,
  }
});
	});
	</script>
<script>
document.onkeydown = function(e) {
  if(event.keyCode == 123) {
     return false;
  }
  if(e.ctrlKey && e.shiftKey && e.keyCode == 'I'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.shiftKey && e.keyCode == 'C'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.shiftKey && e.keyCode == 'J'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.keyCode == 'U'.charCodeAt(0)) {
     return false;
  }
    if(e.ctrlKey && e.keyCode == 'S'.charCodeAt(0)) {
     return false;
  }
}
</script>
</body>
</html>